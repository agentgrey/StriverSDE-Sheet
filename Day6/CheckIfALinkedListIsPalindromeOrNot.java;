// Using Extra Space
// Time:O(N)  Space:O(N)




static boolean isPalindrome(Node head) {
    ArrayList<Integer> arr=new ArrayList<>();
    while(head != null) {
        arr.add(head.num);
        head = head.next;
    }
    for(int i=0;i<arr.size()/2;i++) 
        if(arr.get(i) != arr.get(arr.size()-i-1)) return false;
    return true;
}





// Optimized Solution
// Time:O(N/2)  Space:O(1)




public boolean isPalindrome(ListNode head) {
        if(head==null || head.next==null) return true;
        
        ListNode fast = head;
        ListNode slow = head;
        
        while(fast!=null && fast.next!=null) {
            slow = slow.next;
            fast = fast.next.next;
        } 
        
        if(fast!=null) slow = slow.next;
        
        slow = reverse(slow);
        fast = head;
        
        while(slow!=null) {
            if(slow.val!=fast.val) return false;
            slow = slow.next;
            fast = fast.next;
        }
        
        return true;
    }
    
    public ListNode reverse(ListNode head) {
        ListNode prev = null;
        
        while (head != null) {
            ListNode next = head.next;
            head.next = prev;
            prev = head;
            head = next;
        }
        return prev;
    }